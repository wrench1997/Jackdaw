
const { CoreLayer, createReport, browerHttpJob } = require('../core/core.js')

class SpringSecurityTester extends CoreLayer {
    constructor(coreobj) {
        super(coreobj);
    }

    async request(uri, user, pass, port = 80) {
        const lastJob = await browerHttpJob()
        lastJob.url = this.scanURL
        lastJob.verb = 'GET'
        lastJob.URI = uri
        lastJob.addCookies = false
        lastJob.autoAuthenticate = true
        lastJob.execute()
        if (!lastJob.wasError) {
            return true
        }
        return false
    }

    async startTesting() {
        const urls = [
            "/oauth/authorize?response_type=token&client_id=acme&redirect_uri=${333333*3}"
        ]
        this.matches.plainArray = [
            'Invalid redirect: 999999 does not match one of the registered values:'
        ]
        this.matches.regexArray = []
        for (let url of urls) {
            if (await this.request(url)) {
                const matchedText = this.matches.searchOnText(lastJob.response.body)
                if (matchedText) {
                    const msg = { url: lastJob.url, body: "", payload: "", vuln: this.getVulnId(__filename), level: "h" }
                    this.alert(createReport(msg))
                }
            }
        }
    }
}

module.exports = SpringSecurityTester
